Creating a complete backend codebase for the Unified Data Science Platform (UDSP) involves multiple components, including data ingestion, storage, processing, API endpoints, and security features. Below is a simplified example to get you started, focusing on a basic structure using Flask for the API, SQLAlchemy for the database, and Docker for containerization.

### 1. Project Structure

```
udsp/
├── app/
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
│   ├── config.py
│   ├── utils.py
├── migrations/
├── tests/
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
├── run.py
```

### 2. Backend Code

#### `app/__init__.py`
```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

db = SQLAlchemy()
migrate = Migrate()

def create_app(config_class='config.Config'):
    app = Flask(__name__)
    app.config.from_object(config_class)

    db.init_app(app)
    migrate.init_app(app, db)

    from app import routes, models
    app.register_blueprint(routes.bp)

    return app
```

#### `app/models.py`
```python
from app import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))

    def __repr__(self):
        return f'<User {self.username}>'
```

#### `app/routes.py`
```python
from flask import Blueprint, jsonify, request
from app import db
from app.models import User

bp = Blueprint('main', __name__)

@bp.route('/users', methods=['GET'])
def get_users():
    users = User.query.all()
    return jsonify([user.username for user in users])

@bp.route('/user', methods=['POST'])
def create_user():
    data = request.json
    new_user = User(username=data['username'], email=data['email'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User created'}), 201
```

#### `app/config.py`
```python
import os

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
```

#### `run.py`
```python
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
```

### 3. Docker Setup

#### `Dockerfile`
```Dockerfile
FROM python:3.9

WORKDIR /usr/src/app

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 5000
CMD ["python", "run.py"]
```

#### `docker-compose.yml`
```yaml
version: '3.8'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:///app.db
    volumes:
      - .:/usr/src/app
    depends_on:
      - db

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: udsp
    volumes:
      - pgdata:/var/lib/postgresql/data

volumes:
  pgdata:
```

### 4. Requirements

#### `requirements.txt`
```text
Flask==2.0.1
Flask-SQLAlchemy==2.5.1
Flask-Migrate==3.1.0
psycopg2-binary==2.9.1
```

### 5. Database Migrations

#### Initialize the Database
```bash
docker-compose run web flask db init
docker-compose run web flask db migrate -m "Initial migration."
docker-compose run web flask db upgrade
```

### 6. Running the Application

#### Start Docker Containers
```bash
docker-compose up --build
```

### 7. Testing

#### `tests/test_app.py`
```python
import unittest
from app import create_app, db
from app.models import User

class UserModelCase(unittest.TestCase):

    def setUp(self):
        self.app = create_app()
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    def test_user_creation(self):
        u = User(username='test', email='test@example.com')
        db.session.add(u)
        db.session.commit()
        self.assertEqual(u.username, 'test')

if __name__ == '__main__':
    unittest.main()
```

#### Run Tests
```bash
docker-compose run web pytest
```

This codebase provides a basic structure for your backend service. You can extend it by adding more models, routes, error handling, authentication, and other necessary features.