Creating a frontend codebase for the Unified Data Science Platform (UDSP) involves setting up a React application with routing, state management, and basic components for data visualization and interaction. Below is a basic example to get you started with a React frontend using Create React App, React Router, Axios for API calls, and some basic components.

### 1. Project Structure

```
udsp-frontend/
├── public/
│   ├── index.html
├── src/
│   ├── components/
│   │   ├── Navbar.js
│   │   ├── UserList.js
│   ├── pages/
│   │   ├── Home.js
│   │   ├── Users.js
│   ├── services/
│   │   ├── api.js
│   ├── App.js
│   ├── index.js
├── .env
├── package.json
├── README.md
```

### 2. Setup React Application

#### Initialize React App
```bash
npx create-react-app udsp-frontend
cd udsp-frontend
```

### 3. Install Dependencies

#### Install necessary packages
```bash
npm install react-router-dom axios
```

### 4. Environment Variables

#### `.env`
```env
REACT_APP_API_BASE_URL=http://localhost:5000
```

### 5. Components

#### `src/components/Navbar.js`
```javascript
import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  return (
    <nav>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/users">Users</Link></li>
      </ul>
    </nav>
  );
};

export default Navbar;
```

#### `src/components/UserList.js`
```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const UserList = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/users`);
        setUsers(response.data);
      } catch (error) {
        console.error("There was an error fetching the users!", error);
      }
    };

    fetchUsers();
  }, []);

  return (
    <div>
      <h2>User List</h2>
      <ul>
        {users.map(user => (
          <li key={user}>{user}</li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;
```

### 6. Pages

#### `src/pages/Home.js`
```javascript
import React from 'react';

const Home = () => {
  return (
    <div>
      <h1>Welcome to UDSP</h1>
    </div>
  );
};

export default Home;
```

#### `src/pages/Users.js`
```javascript
import React from 'react';
import UserList from '../components/UserList';

const Users = () => {
  return (
    <div>
      <h1>Users</h1>
      <UserList />
    </div>
  );
};

export default Users;
```

### 7. Services

#### `src/services/api.js`
```javascript
import axios from 'axios';

const api = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL
});

export default api;
```

### 8. Main Application

#### `src/App.js`
```javascript
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './pages/Home';
import Users from './pages/Users';

const App = () => {
  return (
    <Router>
      <div>
        <Navbar />
        <Switch>
          <Route exact path="/" component={Home} />
          <Route path="/users" component={Users} />
        </Switch>
      </div>
    </Router>
  );
};

export default App;
```

#### `src/index.js`
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

### 9. Running the Application

#### Start the React Application
```bash
npm start
```

### 10. Testing

#### Basic Test Setup
- Create basic tests in `src/__tests__` using Jest and React Testing Library.
- Add tests for components and pages to ensure they render correctly and interact with the backend API as expected.

### Conclusion

This frontend codebase provides a basic structure for the Unified Data Science Platform. You can extend it by adding more pages, components, advanced state management (e.g., Redux), and data visualization libraries (e.g., D3.js, Chart.js). Integrate with the backend API for more complex operations and ensure thorough testing for a robust application.